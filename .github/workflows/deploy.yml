name: Deploy Detection Rules

on:
  push:
    branches: [ main, 'feature/**' ]  # Allow feature branches
    paths:
      - 'env/**'
      - 'infra/**'
      - 'kql/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      skip_validation:
        description: 'Skip validation steps (for testing)'
        required: false
        default: false
        type: boolean
      force_deploy_all:
        description: 'Force deploy all rules (ignore changes)'
        required: false
        default: false
        type: boolean
      target_branch:
        description: 'Branch to deploy from (for manual triggers)'
        required: false
        default: 'main'
        type: string

permissions:
  id-token: write
  contents: write
  pull-requests: write

env:
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}

jobs:
  detect-deployment-needs:
    runs-on: ubuntu-latest
    outputs:
      needs-deployment: ${{ steps.check-deployment-needs.outputs.needs-deployment }}
    
    steps:
    - name: Debug - Workflow Started
      run: |
        echo "🎉 DEPLOYMENT WORKFLOW TRIGGERED!"
        echo "Event: ${{ github.event_name }}"
        echo "Action: ${{ github.event.action }}"
        echo "Ref: ${{ github.ref }}"
        echo "Base: ${{ github.event.pull_request.base.ref }}"
        echo "Head: ${{ github.event.pull_request.head.ref }}"
        echo "Target branch: ${{ github.event.inputs.target_branch }}"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo ""
        echo "📋 Deployment Plan:"
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "  ✅ Main branch push - will deploy to PROD only"
        elif [[ "${{ github.ref }}" == refs/heads/feature/* ]]; then
          echo "  ✅ Feature branch push - will deploy to DEV only"
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "  ✅ Pull request - will deploy to DEV only"
        else
          echo "  ❓ Unknown trigger - check conditions"
        fi
    
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Need at least 2 commits to detect changes
    
    - name: Debug - Workflow Trigger Info
      run: |
        echo "=== WORKFLOW DEBUG INFO ==="
        echo "Event name: ${{ github.event_name }}"
        echo "Event action: ${{ github.event.action }}"
        echo "Base ref: ${{ github.event.pull_request.base.ref }}"
        echo "Head ref: ${{ github.event.pull_request.head.ref }}"
        echo "Changed files:"
        git diff --name-only origin/main...HEAD || echo "No changes detected"
        echo "=== END DEBUG INFO ==="
    
    - name: Debug file structure (detect-deployment-needs)
      run: |
        echo "=== DEBUG: detect-deployment-needs job ==="
        echo "Current directory: $(pwd)"
        echo "Listing files:"
        ls -la
        echo "Listing env directory:"
        ls -la env/ || echo "env directory not found"
        echo "Listing infra directory:"
        ls -la infra/ || echo "infra directory not found"
        echo "=== END DEBUG ==="
    
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az --version
    
    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Check deployment needs
      id: check-deployment-needs
      run: |
        echo "Checking if deployment is needed..."
        
        # For workflow_dispatch with force_deploy_all, always deploy
        if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ inputs.force_deploy_all }}" == "true" ]; then
          echo "Force deploy all rules requested"
          echo "needs-deployment=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Check for changes in relevant paths
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "Manual workflow dispatch - checking for changes"
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E "(env/|infra/|kql/)" || true)
        elif [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "Pull request - checking for changes against base branch"
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep -E "(env/|infra/|kql/)" || true)
        else
          echo "Detecting changed files..."
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E "(env/|infra/|kql/)" || true)
        fi
        
        # Check if any rules are missing from Sentinel
        echo "Checking for missing rules in Sentinel..."
        DEPLOYED_RULES=$(az sentinel alert-rule list \
          --resource-group ${{ secrets.SENTINEL_RG_DEV }} \
          --workspace-name ${{ secrets.SENTINEL_WS_DEV }} \
          --output json | jq -r '.[].displayName' 2>/dev/null || echo "")
        
        echo "Deployed rules: $DEPLOYED_RULES"
        
        # For pull requests, always deploy since we know there are changes
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "Pull request detected - will deploy to dev for testing"
          echo "needs-deployment=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # For feature branch pushes, always deploy to dev for testing
        if [[ "${{ github.ref }}" == refs/heads/feature/* ]]; then
          echo "Feature branch detected - will deploy to dev for testing"
          echo "needs-deployment=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # For main branch pushes, always deploy to ensure changes are applied
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "Main branch push detected - will deploy to both dev and prod"
          echo "needs-deployment=true" >> $GITHUB_OUTPUT
        elif [ -n "$CHANGED_FILES" ]; then
          echo "Changes detected in: $CHANGED_FILES"
          echo "needs-deployment=true" >> $GITHUB_OUTPUT
        else
          echo "No relevant changes detected"
          echo "needs-deployment=false" >> $GITHUB_OUTPUT
        fi

  build-validate:
    runs-on: ubuntu-latest
    needs: detect-deployment-needs
    if: ${{ !inputs.skip_validation || github.event_name != 'workflow_dispatch' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az --version
    
    - name: Install Bicep CLI
      run: |
        az bicep install
        az bicep version
    
    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Debug file structure
      run: |
        echo "Current directory: $(pwd)"
        echo "Listing files:"
        ls -la
        echo "Listing env directory:"
        ls -la env/ || echo "env directory not found"
        echo "Listing infra directory:"
        ls -la infra/ || echo "infra directory not found"
    
    - name: Validate Bicep templates (static)
      run: |
        echo "Validating Bicep templates (static checks)..."
        if [ "${{ needs.detect-deployment-needs.outputs.needs-deployment }}" == "true" ]; then
          echo "Building main templates..."
          az bicep build --file infra/sentinel-rules.bicep
          az bicep build --file infra/modules/scheduledRule.bicep
          az bicep build --file env/deploy-dev.bicep
          az bicep build --file env/deploy-prod.bicep
          echo "✅ Bicep templates validated successfully"
        else
          echo "No deployment needed - skipping validation"
        fi
    
    - name: Validate deployment (Dev)
      run: |
        echo "Validating deployment against Dev environment..."
        if [ "${{ needs.detect-deployment-needs.outputs.needs-deployment }}" == "true" ]; then
          az deployment group validate \
            --resource-group ${{ secrets.SENTINEL_RG_DEV }} \
            --template-file env/deploy-dev.bicep \
            --parameters env/params/dev.jsonc
          echo "✅ Dev deployment validation completed successfully"
        else
          echo "No deployment needed - skipping validation"
        fi
    
    - name: What-if deployment (Dev)
      run: |
        echo "Running what-if deployment for Dev environment..."
        if [ "${{ needs.detect-deployment-needs.outputs.needs-deployment }}" == "true" ]; then
          az deployment group what-if \
            --resource-group ${{ secrets.SENTINEL_RG_DEV }} \
            --template-file env/deploy-dev.bicep \
            --parameters env/params/dev.jsonc \
            --no-pretty-print --only-show-errors
          echo "✅ What-if deployment completed successfully"
        else
          echo "No deployment needed - skipping what-if"
        fi

  deploy-dev:
    needs: [detect-deployment-needs, build-validate]
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/feature/')) || 
      (github.event_name == 'pull_request') || 
      (github.event_name == 'workflow_dispatch' && inputs.environment == 'dev')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.target_branch || github.ref }}
    
    - name: Debug - Deployment Info
      run: |
        echo "=== DEPLOYMENT DEBUG INFO ==="
        echo "Event: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Target branch: ${{ github.event.inputs.target_branch || github.ref }}"
        echo "Environment: dev"
        echo "Needs deployment: ${{ needs.detect-deployment-needs.outputs.needs-deployment }}"
        echo "=== END DEBUG INFO ==="
    
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az --version
    
    - name: Install Bicep CLI
      run: |
        az bicep install
        az bicep version
    
    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Deploy to Dev
      run: |
        echo "Deploying to Dev environment..."
        if [ "${{ needs.detect-deployment-needs.outputs.needs-deployment }}" == "true" ]; then
          az deployment group create \
            --resource-group ${{ secrets.SENTINEL_RG_DEV }} \
            --template-file env/deploy-dev.bicep \
            --parameters env/params/dev.jsonc \
            --verbose
          echo "✅ Dev deployment completed successfully"
        else
          echo "No deployment needed - skipping"
        fi
    
    - name: Verify deployment
      run: |
        echo "Verifying Dev deployment..."
        # List deployed rules
        az sentinel alert-rule list \
          --resource-group ${{ secrets.SENTINEL_RG_DEV }} \
          --workspace-name ${{ secrets.SENTINEL_WS_DEV }} \
          --query '[].{Name: displayName, Enabled: enabled, Severity: severity}' \
          --output table

  deploy-prod:
    needs: [detect-deployment-needs, build-validate]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && inputs.environment == 'prod')
    environment: sentinel-prod
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az --version
    
    - name: Install Bicep CLI
      run: |
        az bicep install
        az bicep version
    
    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Deploy to Prod
      run: |
        echo "Deploying to Production environment..."
        if [ "${{ needs.detect-deployment-needs.outputs.needs-deployment }}" == "true" ]; then
          az deployment group create \
            --resource-group ${{ secrets.SENTINEL_RG_PROD }} \
            --template-file env/deploy-prod.bicep \
            --parameters env/params/prod.jsonc \
            --verbose
          echo "✅ Production deployment completed successfully"
        else
          echo "No deployment needed - skipping"
        fi
    
    - name: Verify production deployment
      run: |
        echo "Verifying Production deployment..."
        # List deployed rules
        az sentinel alert-rule list \
          --resource-group ${{ secrets.SENTINEL_RG_PROD }} \
          --workspace-name ${{ secrets.SENTINEL_WS_PROD }} \
          --query '[].{Name: displayName, Enabled: enabled, Severity: severity}' \
          --output table
    
    - name: Post-deployment validation
      run: |
        echo "Running post-deployment validation..."
        # Add any post-deployment checks here
        # e.g., verify rules are enabled, check incident configuration
        echo "✅ Post-deployment validation completed"
