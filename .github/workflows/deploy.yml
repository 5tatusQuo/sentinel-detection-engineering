name: Deploy Detection Rules

on:
  push:
    branches: [ main ]
    paths:
      - 'rules/custom/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'rules/custom/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      skip_validation:
        description: 'Skip validation steps (for testing)'
        required: false
        default: false
        type: boolean
      force_deploy_all:
        description: 'Force deploy all rules (ignore changes)'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: write
  pull-requests: write

env:
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-rules: ${{ steps.get-changed-files.outputs.changed-rules }}
      has-changes: ${{ steps.get-changed-files.outputs.has-changes }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Need at least 2 commits to detect changes
    
    - name: Get changed files
      id: get-changed-files
      run: |
        # Get list of changed files
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          if [ "${{ inputs.force_deploy_all }}" == "true" ]; then
            echo "Force deploy all rules requested"
            echo "changed-rules=$(find rules/custom -name "*.bicep" -printf "%f\n" | tr '\n' ' ')" >> $GITHUB_OUTPUT
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            echo "Manual workflow dispatch - no changes detected"
            echo "changed-rules=" >> $GITHUB_OUTPUT
            echo "has-changes=false" >> $GITHUB_OUTPUT
          fi
        else
          # For push/PR events, detect actual changes
          echo "Detecting changed files..."
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E "rules/custom/.*\.(bicep|jsonc)$" || true)
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No relevant files changed"
            echo "changed-rules=" >> $GITHUB_OUTPUT
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changed files: $CHANGED_FILES"
            # Extract just the Bicep file names (without extension) that have changes
            CHANGED_RULES=$(echo "$CHANGED_FILES" | grep "\.bicep$" | xargs -n1 basename -s .bicep | tr '\n' ' ')
            echo "Changed rules: $CHANGED_RULES"
            echo "changed-rules=$CHANGED_RULES" >> $GITHUB_OUTPUT
            echo "has-changes=true" >> $GITHUB_OUTPUT
          fi
        fi

  build-validate:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ !inputs.skip_validation || github.event_name != 'workflow_dispatch' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az --version
    
    - name: Install Bicep CLI
      run: |
        az bicep install
        az bicep version
    
    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Validate Bicep templates
      run: |
        echo "Validating Bicep templates..."
        if [ "${{ needs.detect-changes.outputs.has-changes }}" == "true" ]; then
          # Only validate changed rules
          for rule in ${{ needs.detect-changes.outputs.changed-rules }}; do
            file="rules/custom/${rule}.bicep"
            if [ -f "$file" ]; then
              echo "Building $file"
              az bicep build --file "$file"
              if [ $? -ne 0 ]; then
                echo "❌ Bicep validation failed for $file"
                exit 1
              fi
            fi
          done
        else
          # If no changes detected, validate all rules
          for file in rules/custom/*.bicep; do
            if [ -f "$file" ]; then
              echo "Building $file"
              az bicep build --file "$file"
              if [ $? -ne 0 ]; then
                echo "❌ Bicep validation failed for $file"
                exit 1
              fi
            fi
          done
        fi
        echo "✅ All Bicep templates validated successfully"
    
    - name: What-if deployment (Dev)
      run: |
        echo "Running what-if deployment for Dev environment..."
        if [ "${{ needs.detect-changes.outputs.has-changes }}" == "true" ]; then
          # Only what-if for changed rules
          for rule in ${{ needs.detect-changes.outputs.changed-rules }}; do
            file="rules/custom/${rule}.bicep"
            param_file="rules/custom/params/dev-${rule}.jsonc"
            
            echo "What-if for $file using $param_file"
            if [ -f "$param_file" ]; then
              az deployment group what-if \
                --resource-group ${{ secrets.SENTINEL_RG_DEV }} \
                --template-file "$file" \
                --parameters "$param_file" \
                --no-pretty-print
            else
              echo "⚠️  Parameter file $param_file not found, skipping $file"
            fi
          done
        else
          # If no changes detected, what-if all rules
          for file in rules/custom/*.bicep; do
            if [ -f "$file" ]; then
              basename=$(basename "$file" .bicep)
              param_file="rules/custom/params/dev-${basename}.jsonc"
              
              echo "What-if for $file using $param_file"
              if [ -f "$param_file" ]; then
                az deployment group what-if \
                  --resource-group ${{ secrets.SENTINEL_RG_DEV }} \
                  --template-file "$file" \
                  --parameters "$param_file" \
                  --no-pretty-print
              else
                echo "⚠️  Parameter file $param_file not found, skipping $file"
              fi
            fi
          done
        fi
        echo "✅ What-if deployment completed successfully"
    
    - name: Smoke test queries
      run: |
        echo "Running smoke tests on queries..."
        # This is a placeholder for query validation
        # In a real implementation, you might:
        # 1. Extract queries from Bicep templates
        # 2. Add "| take 0" to make them safe
        # 3. Execute against Dev workspace
        echo "✅ Smoke tests completed (placeholder)"

  deploy-dev:
    needs: [detect-changes, build-validate]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && inputs.environment == 'dev')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az --version
    
    - name: Install Bicep CLI
      run: |
        az bicep install
        az bicep version
    
    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Deploy to Dev
      run: |
        echo "Deploying to Dev environment..."
        if [ "${{ needs.detect-changes.outputs.has-changes }}" == "true" ]; then
          # Only deploy changed rules
          for rule in ${{ needs.detect-changes.outputs.changed-rules }}; do
            file="rules/custom/${rule}.bicep"
            param_file="rules/custom/params/dev-${rule}.jsonc"
            
            echo "Deploying $file using $param_file"
            if [ -f "$param_file" ]; then
              az deployment group create \
                --resource-group ${{ secrets.SENTINEL_RG_DEV }} \
                --template-file "$file" \
                --parameters "$param_file" \
                --verbose
            else
              echo "⚠️  Parameter file $param_file not found, skipping $file"
            fi
          done
        else
          # If no changes detected, deploy all rules
          for file in rules/custom/*.bicep; do
            if [ -f "$file" ]; then
              basename=$(basename "$file" .bicep)
              param_file="rules/custom/params/dev-${basename}.jsonc"
              
              echo "Deploying $file using $param_file"
              if [ -f "$param_file" ]; then
                az deployment group create \
                  --resource-group ${{ secrets.SENTINEL_RG_DEV }} \
                  --template-file "$file" \
                  --parameters "$param_file" \
                  --verbose
              else
                echo "⚠️  Parameter file $param_file not found, skipping $file"
              fi
            fi
          done
        fi
        echo "✅ Dev deployment completed successfully"
    
    - name: Verify deployment
      run: |
        echo "Verifying Dev deployment..."
        # List deployed rules
        az deployment group show \
          --resource-group ${{ secrets.SENTINEL_RG_DEV }} \
          --name $(az deployment group list --resource-group ${{ secrets.SENTINEL_RG_DEV }} --query '[0].name' -o tsv) \
          --query 'properties.outputs' \
          --output table

  deploy-prod:
    needs: [detect-changes, build-validate, deploy-dev]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && inputs.environment == 'prod')
    environment: sentinel-prod
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az --version
    
    - name: Install Bicep CLI
      run: |
        az bicep install
        az bicep version
    
    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Deploy to Prod
      run: |
        echo "Deploying to Production environment..."
        if [ "${{ needs.detect-changes.outputs.has-changes }}" == "true" ]; then
          # Only deploy changed rules
          for rule in ${{ needs.detect-changes.outputs.changed-rules }}; do
            file="rules/custom/${rule}.bicep"
            param_file="rules/custom/params/prod-${rule}.jsonc"
            
            echo "Deploying $file using $param_file"
            if [ -f "$param_file" ]; then
              az deployment group create \
                --resource-group ${{ secrets.SENTINEL_RG_PROD }} \
                --template-file "$file" \
                --parameters "$param_file" \
                --verbose
            else
              echo "⚠️  Parameter file $param_file not found, skipping $file"
            fi
          done
        else
          # If no changes detected, deploy all rules
          for file in rules/custom/*.bicep; do
            if [ -f "$file" ]; then
              basename=$(basename "$file" .bicep)
              param_file="rules/custom/params/prod-${basename}.jsonc"
              
              echo "Deploying $file using $param_file"
              if [ -f "$param_file" ]; then
                az deployment group create \
                  --resource-group ${{ secrets.SENTINEL_RG_PROD }} \
                  --template-file "$file" \
                  --parameters "$param_file" \
                  --verbose
              else
                echo "⚠️  Parameter file $param_file not found, skipping $file"
              fi
            fi
          done
        fi
        echo "✅ Production deployment completed successfully"
    
    - name: Verify production deployment
      run: |
        echo "Verifying Production deployment..."
        # List deployed rules
        az deployment group show \
          --resource-group ${{ secrets.SENTINEL_RG_PROD }} \
          --name $(az deployment group list --resource-group ${{ secrets.SENTINEL_RG_PROD }} --query '[0].name' -o tsv) \
          --query 'properties.outputs' \
          --output table
    
    - name: Post-deployment validation
      run: |
        echo "Running post-deployment validation..."
        # Add any post-deployment checks here
        # e.g., verify rules are enabled, check incident configuration
        echo "✅ Post-deployment validation completed"
