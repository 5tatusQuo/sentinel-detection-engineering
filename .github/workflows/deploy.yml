name: Deploy Detection Rules

on:
  push:
    branches: [ main ]
    paths:
      - 'rules/custom/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'rules/custom/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      skip_validation:
        description: 'Skip validation steps (for testing)'
        required: false
        default: false
        type: boolean
      force_deploy_all:
        description: 'Force deploy all rules (ignore changes)'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: write
  pull-requests: write

env:
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}

jobs:
  detect-deployment-needs:
    runs-on: ubuntu-latest
    outputs:
      rules-to-deploy: ${{ steps.check-deployment-needs.outputs.rules-to-deploy }}
      has-rules-to-deploy: ${{ steps.check-deployment-needs.outputs.has-rules-to-deploy }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Need at least 2 commits to detect changes
    
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az --version
    
    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Check deployment needs
      id: check-deployment-needs
      run: |
        echo "Checking what rules need to be deployed..."
        
        # Get list of all Bicep rules in the repo
        REPO_RULES=$(find rules/custom -name "*.bicep" -printf "%f\n" | sed 's/\.bicep$//' | tr '\n' ' ')
        echo "Repo rules: $REPO_RULES"
        
        # Get list of deployed rules in Sentinel
        echo "Getting deployed rules from Sentinel..."
        DEPLOYED_RULES=$(az sentinel alert-rule list \
          --resource-group ${{ secrets.SENTINEL_RG_DEV }} \
          --workspace-name ${{ secrets.SENTINEL_WS_DEV }} \
          --output json | jq -r '.[].displayName' 2>/dev/null || echo "")
        
        echo "Deployed rules: $DEPLOYED_RULES"
        
        # Get list of changed files
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          if [ "${{ inputs.force_deploy_all }}" == "true" ]; then
            echo "Force deploy all rules requested"
            RULES_TO_DEPLOY="$REPO_RULES"
          else
            echo "Manual workflow dispatch - checking for missing rules only"
            RULES_TO_DEPLOY=""
          fi
        else
          # For push/PR events, detect changes
          echo "Detecting changed files..."
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E "rules/custom/.*\.(bicep|jsonc)$" || true)
          
          if [ -n "$CHANGED_FILES" ]; then
            CHANGED_RULES=$(echo "$CHANGED_FILES" | grep "\.bicep$" | xargs -n1 basename -s .bicep | tr '\n' ' ')
          else
            CHANGED_RULES=""
          fi
          echo "Changed rules: $CHANGED_RULES"
          
          # Determine which rules need deployment
          RULES_TO_DEPLOY=""
          for rule in $REPO_RULES; do
            echo "Checking rule: $rule"
            
            # Get the display name for this rule from the parameter file
            PARAM_FILE="rules/custom/params/dev-${rule}.jsonc"
            if [ -f "$PARAM_FILE" ]; then
              DISPLAY_NAME=$(grep -A 1 "ruleDisplayName" "$PARAM_FILE" | grep "value" | cut -d'"' -f4)
              echo "Display name for $rule: '$DISPLAY_NAME'"
            else
              echo "Parameter file $PARAM_FILE not found, skipping $rule"
              continue
            fi
            
            echo "Looking for display name '$DISPLAY_NAME' in deployed rules: '$DEPLOYED_RULES'"
            
            # Check if rule is missing from Sentinel
            if ! echo "$DEPLOYED_RULES" | grep -q "$DISPLAY_NAME"; then
              echo "Rule $rule (display: $DISPLAY_NAME) is missing from Sentinel - will deploy"
              RULES_TO_DEPLOY="$RULES_TO_DEPLOY $rule"
            elif echo "$CHANGED_RULES" | grep -q "$rule"; then
              echo "Rule $rule has changes - will deploy"
              RULES_TO_DEPLOY="$RULES_TO_DEPLOY $rule"
            else
              echo "Rule $rule (display: $DISPLAY_NAME) is already deployed and unchanged - skipping"
            fi
          done
        fi
        
        # Remove leading space and set output
        RULES_TO_DEPLOY=$(echo "$RULES_TO_DEPLOY" | sed 's/^ *//')
        echo "Rules to deploy: $RULES_TO_DEPLOY"
        
        if [ -n "$RULES_TO_DEPLOY" ]; then
          echo "has-rules-to-deploy=true" >> $GITHUB_OUTPUT
        else
          echo "has-rules-to-deploy=false" >> $GITHUB_OUTPUT
        fi
        
        echo "rules-to-deploy=$RULES_TO_DEPLOY" >> $GITHUB_OUTPUT

  build-validate:
    runs-on: ubuntu-latest
    needs: detect-deployment-needs
    if: ${{ !inputs.skip_validation || github.event_name != 'workflow_dispatch' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az --version
    
    - name: Install Bicep CLI
      run: |
        az bicep install
        az bicep version
    
    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Validate Bicep templates
      run: |
        echo "Validating Bicep templates..."
        if [ "${{ needs.detect-deployment-needs.outputs.has-rules-to-deploy }}" == "true" ]; then
          # Only validate rules that need to be deployed
          for rule in ${{ needs.detect-deployment-needs.outputs.rules-to-deploy }}; do
            file="rules/custom/${rule}.bicep"
            if [ -f "$file" ]; then
              echo "Building $file"
              az bicep build --file "$file"
              if [ $? -ne 0 ]; then
                echo "❌ Bicep validation failed for $file"
                exit 1
              fi
            fi
          done
        else
          echo "No rules need deployment - skipping validation"
        fi
        echo "✅ Bicep templates validated successfully"
    
    - name: What-if deployment (Dev)
      run: |
        echo "Running what-if deployment for Dev environment..."
        if [ "${{ needs.detect-deployment-needs.outputs.has-rules-to-deploy }}" == "true" ]; then
          # Only what-if for rules that need to be deployed
          for rule in ${{ needs.detect-deployment-needs.outputs.rules-to-deploy }}; do
            file="rules/custom/${rule}.bicep"
            param_file="rules/custom/params/dev-${rule}.jsonc"
            
            echo "What-if for $file using $param_file"
            if [ -f "$param_file" ]; then
              az deployment group what-if \
                --resource-group ${{ secrets.SENTINEL_RG_DEV }} \
                --template-file "$file" \
                --parameters "$param_file" \
                --no-pretty-print
            else
              echo "⚠️  Parameter file $param_file not found, skipping $file"
            fi
          done
        else
          echo "No rules need deployment - skipping what-if"
        fi
        echo "✅ What-if deployment completed successfully"
    
    - name: Smoke test queries
      run: |
        echo "Running smoke tests on queries..."
        # This is a placeholder for query validation
        # In a real implementation, you might:
        # 1. Extract queries from Bicep templates
        # 2. Add "| take 0" to make them safe
        # 3. Execute against Dev workspace
        echo "✅ Smoke tests completed (placeholder)"

  deploy-dev:
    needs: [detect-deployment-needs, build-validate]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && inputs.environment == 'dev')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az --version
    
    - name: Install Bicep CLI
      run: |
        az bicep install
        az bicep version
    
    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Deploy to Dev
      run: |
        echo "Deploying to Dev environment..."
        if [ "${{ needs.detect-deployment-needs.outputs.has-rules-to-deploy }}" == "true" ]; then
          # Only deploy rules that need to be deployed
          for rule in ${{ needs.detect-deployment-needs.outputs.rules-to-deploy }}; do
            file="rules/custom/${rule}.bicep"
            param_file="rules/custom/params/dev-${rule}.jsonc"
            
            echo "Deploying $file using $param_file"
            if [ -f "$param_file" ]; then
              az deployment group create \
                --resource-group ${{ secrets.SENTINEL_RG_DEV }} \
                --template-file "$file" \
                --parameters "$param_file" \
                --verbose
            else
              echo "⚠️  Parameter file $param_file not found, skipping $file"
            fi
          done
        else
          echo "No rules need deployment - skipping"
        fi
        echo "✅ Dev deployment completed successfully"
    
    - name: Verify deployment
      run: |
        echo "Verifying Dev deployment..."
        # List deployed rules
        az deployment group show \
          --resource-group ${{ secrets.SENTINEL_RG_DEV }} \
          --name $(az deployment group list --resource-group ${{ secrets.SENTINEL_RG_DEV }} --query '[0].name' -o tsv) \
          --query 'properties.outputs' \
          --output table

  deploy-prod:
    needs: [detect-deployment-needs, build-validate, deploy-dev]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && inputs.environment == 'prod')
    environment: sentinel-prod
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az --version
    
    - name: Install Bicep CLI
      run: |
        az bicep install
        az bicep version
    
    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Deploy to Prod
      run: |
        echo "Deploying to Production environment..."
        if [ "${{ needs.detect-deployment-needs.outputs.has-rules-to-deploy }}" == "true" ]; then
          # Only deploy rules that need to be deployed
          for rule in ${{ needs.detect-deployment-needs.outputs.rules-to-deploy }}; do
            file="rules/custom/${rule}.bicep"
            param_file="rules/custom/params/prod-${rule}.jsonc"
            
            echo "Deploying $file using $param_file"
            if [ -f "$param_file" ]; then
              az deployment group create \
                --resource-group ${{ secrets.SENTINEL_RG_PROD }} \
                --template-file "$file" \
                --parameters "$param_file" \
                --verbose
            else
              echo "⚠️  Parameter file $param_file not found, skipping $file"
            fi
          done
        else
          echo "No rules need deployment - skipping"
        fi
        echo "✅ Production deployment completed successfully"
    
    - name: Verify production deployment
      run: |
        echo "Verifying Production deployment..."
        # List deployed rules
        az deployment group show \
          --resource-group ${{ secrets.SENTINEL_RG_PROD }} \
          --name $(az deployment group list --resource-group ${{ secrets.SENTINEL_RG_PROD }} --query '[0].name' -o tsv) \
          --query 'properties.outputs' \
          --output table
    
    - name: Post-deployment validation
      run: |
        echo "Running post-deployment validation..."
        # Add any post-deployment checks here
        # e.g., verify rules are enabled, check incident configuration
        echo "✅ Post-deployment validation completed"
