name: Drift Detection & Sync

on:
  schedule:
    # Run nightly at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to sync from'
        required: true
        type: choice
        options:
          - dev
          - prod
        default: 'dev'
      branch_name:
        description: 'Branch name (leave empty for auto-generated)'
        required: false
        type: string
        default: ''
      rule_name:
        description: 'Specific rule name to sync (leave empty for all custom rules)'
        required: false
        type: string
        default: ''
      organization:
        description: 'Organization to sync (e.g., org1, org2, client-name)'
        required: true
        type: string
        default: ''
      force_sync:
        description: 'Force sync even if no changes detected'
        required: false
        type: boolean
        default: false

permissions:
  id-token: write
  contents: write
  pull-requests: write

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  drift-sync:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup PowerShell
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '7.0.x'

    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Install Bicep CLI
      run: |
        az bicep install
        az bicep version

    - name: Set workflow parameters
      id: params
      run: |
        # Set defaults for scheduled runs vs manual runs
        if [ "${{ github.event_name }}" == "schedule" ]; then
          echo "üïê Scheduled run - using default parameters"
          echo "environment=prod" >> $GITHUB_OUTPUT
          echo "organization=org1" >> $GITHUB_OUTPUT
          echo "rule_name=" >> $GITHUB_OUTPUT
          echo "force_sync=false" >> $GITHUB_OUTPUT
          echo "branch_name=" >> $GITHUB_OUTPUT
        else
          echo "üë§ Manual run - using provided parameters"
          echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          echo "organization=${{ inputs.organization }}" >> $GITHUB_OUTPUT
          echo "rule_name=${{ inputs.rule_name }}" >> $GITHUB_OUTPUT
          echo "force_sync=${{ inputs.force_sync }}" >> $GITHUB_OUTPUT
          echo "branch_name=${{ inputs.branch_name }}" >> $GITHUB_OUTPUT
        fi

    - name: Generate branch name
      id: branch-name
      run: |
        if [ -n "${{ steps.params.outputs.branch_name }}" ]; then
          BRANCH_NAME="${{ steps.params.outputs.branch_name }}"
        else
          TIMESTAMP=$(date -u +'%Y%m%d-%H%M%S')
          BRANCH_NAME="drift/${{ steps.params.outputs.environment }}-$TIMESTAMP"
        fi
        echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "üìù Using branch: $BRANCH_NAME"

    - name: Set current date
      id: date
      run: |
        echo "today=$(date -u +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        echo "timestamp=$(date -u +'%Y-%m-%d %H:%M UTC')" >> $GITHUB_OUTPUT

    - name: Detect drift and sync changes
      id: sync
      run: |
        echo "üîç Starting drift detection and sync from ${{ steps.params.outputs.environment }} environment..."
        
        # Set environment-specific secrets
        if [ "${{ steps.params.outputs.environment }}" == "dev" ]; then
          RG_SECRET="${{ secrets.SENTINEL_RG_DEV }}"
          WS_SECRET="${{ secrets.SENTINEL_WS_DEV }}"
        else
          RG_SECRET="${{ secrets.SENTINEL_RG_PROD }}"
          WS_SECRET="${{ secrets.SENTINEL_WS_PROD }}"
        fi
        
        # Run sync script to detect and pull changes
        echo "Running sync script to detect drift and pull changes..."
        SYNC_OUTPUT=$(pwsh -File scripts/sync-sentinel-changes.ps1 \
          -ResourceGroup "$RG_SECRET" \
          -WorkspaceName "$WS_SECRET" \
          -Environment "${{ steps.params.outputs.environment }}" \
          -Organization "${{ steps.params.outputs.organization }}" \
          -ForceSync:${{ steps.params.outputs.force_sync }} \
          -RuleName "${{ steps.params.outputs.rule_name }}" 2>&1)
        
        echo "$SYNC_OUTPUT"
        
        # Check for GitOps alerts (rules missing in prod)
        if echo "$SYNC_OUTPUT" | grep -q "GitOps Alert:"; then
          echo "gitops-alert=true" >> $GITHUB_OUTPUT
          MISSING_RULES=$(echo "$SYNC_OUTPUT" | grep -A 10 "GitOps Alert:" | grep "   -" | sed 's/   - //' | tr '\n' ', ' | sed 's/, $//')
          echo "missing-rules=$MISSING_RULES" >> $GITHUB_OUTPUT
          echo "üö® GitOps Alert: Rules missing in prod detected"
        else
          echo "gitops-alert=false" >> $GITHUB_OUTPUT
          echo "missing-rules=" >> $GITHUB_OUTPUT
          echo "‚úÖ No GitOps alerts - all rules in sync"
        fi

    - name: Check for changes
      id: check-changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changes-detected=true" >> $GITHUB_OUTPUT
          echo "üìù Changes detected in sync"
          git status --porcelain
        else
          echo "changes-detected=false" >> $GITHUB_OUTPUT
          echo "‚úÖ No changes detected in sync"
        fi

    - name: Determine PR action needed
      id: pr-decision
      run: |
        # Create PR if there are file changes OR GitOps alerts
        if [ "${{ steps.check-changes.outputs.changes-detected }}" == "true" ] || [ "${{ steps.sync.outputs.gitops-alert }}" == "true" ]; then
          echo "create-pr=true" >> $GITHUB_OUTPUT
          echo "üéØ PR creation needed: Changes=${{ steps.check-changes.outputs.changes-detected }}, GitOps Alert=${{ steps.sync.outputs.gitops-alert }}"
        else
          echo "create-pr=false" >> $GITHUB_OUTPUT
          echo "‚úÖ No PR needed: No changes and no GitOps alerts"
        fi

    - name: Debug outputs
      run: |
        echo "changes-detected = ${{ steps.check-changes.outputs.changes-detected }}"
        echo "gitops-alert = ${{ steps.sync.outputs.gitops-alert }}"
        echo "missing-rules = ${{ steps.sync.outputs.missing-rules }}"
        echo "create-pr = ${{ steps.pr-decision.outputs.create-pr }}"

    - name: Create branch and commit changes
      if: steps.pr-decision.outputs.create-pr == 'true'
      run: |
        echo "üéØ Creating branch for sync changes and/or GitOps deployment..."
        
        # Configure Git identity for commits
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Create and switch to new branch
        git checkout -b ${{ steps.branch-name.outputs.branch-name }}
        
        # If there are file changes, commit them
        if [ "${{ steps.check-changes.outputs.changes-detected }}" == "true" ]; then
          echo "üìù Committing sync changes..."
          git add .
          git commit -m "${{ steps.sync.outputs.gitops-alert == 'true' && 'üö® GitOps sync and deployment required' || 'üîç Drift sync' }} from ${{ steps.params.outputs.environment }} - ${{ steps.date.outputs.timestamp }}"
        elif [ "${{ steps.sync.outputs.gitops-alert }}" == "true" ]; then
          echo "üìù Creating empty commit for GitOps deployment trigger..."
          git commit --allow-empty -m "üö® GitOps deployment required: Deploy missing rules to prod - ${{ steps.sync.outputs.missing-rules }} - Timestamp: ${{ steps.date.outputs.timestamp }}"
        else
          echo "üìù No changes and no GitOps alerts - no commit needed"
        fi
        
        # Push the branch (even if empty for GitOps-only scenarios)
        git push origin ${{ steps.branch-name.outputs.branch-name }}
        echo "‚úÖ Created and pushed branch: ${{ steps.branch-name.outputs.branch-name }}"

    - name: Create Pull Request
      if: steps.pr-decision.outputs.create-pr == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const hasChanges = '${{ steps.check-changes.outputs.changes-detected }}' === 'true';
          const hasGitOpsAlert = '${{ steps.sync.outputs.gitops-alert }}' === 'true';
          const environment = '${{ steps.params.outputs.environment }}';
          const organization = '${{ steps.params.outputs.organization }}';
          const ruleName = '${{ steps.params.outputs.rule_name }}' || 'All custom rules';
          const branchName = '${{ steps.branch-name.outputs.branch-name }}';
          const timestamp = '${{ steps.date.outputs.timestamp }}';
          const today = '${{ steps.date.outputs.today }}';
          const missingRules = '${{ steps.sync.outputs.missing-rules }}';
          
          let title, body;
          
          if (hasGitOpsAlert) {
            title = 'üö® GitOps: Deploy to Prod from ' + environment + ' - ' + today;
            body = '## GitOps Deployment Required from ' + environment + ' Environment\n\n' +
                   '‚ö†Ô∏è **This PR is required for GitOps deployment!**\n\n' +
                   '**Environment:** ' + environment + '\n' +
                   '**Organization:** ' + organization + '\n' +
                   '**Branch:** ' + branchName + '\n' +
                   '**Rule:** ' + ruleName + '\n' +
                   '**Timestamp:** ' + timestamp + '\n\n' +
                   '### üö® Rules Missing in Production\n\n' +
                   'The following rules exist in dev but are missing from production:\n' +
                   '- ' + missingRules + '\n\n' +
                   '**Action Required:** Merging this PR will trigger the deployment workflow to deploy these rules to production.\n\n' +
                   '### Changes\n' +
                   (hasChanges ? '- Synced KQL queries and configurations\n' : '- No file changes (GitOps deployment only)\n') +
                   '- Custom rules only (vendor rules excluded)\n\n' +
                   '‚ö†Ô∏è **Important:** This PR ensures dev/prod environment parity.';
          } else {
            title = 'üîç Drift Sync from ' + environment + ' - ' + today;
            body = '## Drift Sync from ' + environment + ' Environment\n\n' +
                   'This PR contains changes synced from the ' + environment + ' Sentinel environment due to detected configuration drift.\n\n' +
                   '**Environment:** ' + environment + '\n' +
                   '**Organization:** ' + organization + '\n' +
                   '**Branch:** ' + branchName + '\n' +
                   '**Rule:** ' + ruleName + '\n' +
                   '**Timestamp:** ' + timestamp + '\n\n' +
                   '### What happened?\n' +
                   'Configuration drift was detected - rules were modified directly in the Azure portal and need to be synced back to Git.\n\n' +
                   '### Changes\n' +
                   '- Synced KQL queries\n' +
                   '- Updated rule configurations\n' +
                   '- Custom rules only (vendor rules excluded)\n\n' +
                   'Please review the changes before merging.';
          }

          const { data: pullRequest } = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            head: branchName,
            base: 'main',
            body: body
          });

          console.log('üéØ Created PR #' + pullRequest.number + ': ' + pullRequest.title);
          console.log('üìù PR URL: ' + pullRequest.html_url);

          core.setOutput('pr-number', pullRequest.number);
          core.setOutput('pr-url', pullRequest.html_url);

    - name: No action needed notification
      if: steps.pr-decision.outputs.create-pr == 'false'
      run: |
        echo "‚ÑπÔ∏è No action needed:"
        echo "   - File changes: ${{ steps.check-changes.outputs.changes-detected }}"
        echo "   - GitOps alerts: ${{ steps.sync.outputs.gitops-alert }}"
        echo "   - All environments are in sync ‚úÖ"
