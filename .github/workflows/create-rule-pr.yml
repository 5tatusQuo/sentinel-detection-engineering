name: Create Rule Pull Request

on:
  workflow_dispatch:
    inputs:
      rule_name:
        description: 'Name of the new rule (e.g., suspicious-login-attempts)'
        required: true
        type: string
      display_name:
        description: 'Display name for the rule (e.g., Suspicious Login Attempts)'
        required: true
        type: string
      severity:
        description: 'Severity level'
        required: true
        type: choice
        options:
          - Low
          - Medium
          - High
          - Critical
      tactics:
        description: 'MITRE ATT&CK tactics (comma-separated)'
        required: true
        type: string
        default: 'InitialAccess'
      techniques:
        description: 'MITRE ATT&CK techniques (comma-separated)'
        required: true
        type: string
        default: 'T1078'
      kql_query:
        description: 'KQL query for the detection rule'
        required: true
        type: string
        default: |
          SecurityEvent
          | where EventID == 4624
          | where LogonType == 3
          | where TimeGenerated > ago(1h)
          | project TimeGenerated, Computer, SubjectUserName, IPAddress, LogonType

permissions:
  id-token: write
  contents: write
  pull-requests: write

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  create-rule-branch:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Install PowerShell
      run: |
        sudo apt-get update
        sudo apt-get install -y powershell
    
    - name: Create feature branch
      run: |
        BRANCH_NAME="feature/add-rule-${{ inputs.rule_name }}"
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git checkout -b "$BRANCH_NAME"
        echo "Created branch: $BRANCH_NAME"
    
    - name: Create KQL file
      run: |
        KQL_FILE="kql/${{ inputs.rule_name }}.kql"
        echo "${{ inputs.kql_query }}" > "$KQL_FILE"
        echo "Created KQL file: $KQL_FILE"
        echo "KQL file contents:"
        cat "$KQL_FILE"
    
    - name: Generate rule configuration
      run: |
        pwsh scripts/generate-rule-config.ps1 \
          -KqlFile "kql/${{ inputs.rule_name }}.kql" \
          -RuleName "${{ inputs.rule_name }}" \
          -Severity "${{ inputs.severity }}" \
          -Environment "dev" \
          -Tactics "${{ inputs.tactics }}" \
          -Techniques "${{ inputs.techniques }}" \
          -CreateIncident:false
    
    - name: Generate prod configuration
      run: |
        # Determine prod severity (escalate by one level)
        PROD_SEVERITY="${{ inputs.severity }}"
        case "${{ inputs.severity }}" in
          "Low") PROD_SEVERITY="Medium" ;;
          "Medium") PROD_SEVERITY="High" ;;
          "High") PROD_SEVERITY="High" ;;
          "Critical") PROD_SEVERITY="Critical" ;;
        esac
        
        pwsh scripts/generate-rule-config.ps1 \
          -KqlFile "kql/${{ inputs.rule_name }}.kql" \
          -RuleName "${{ inputs.rule_name }}" \
          -Severity "$PROD_SEVERITY" \
          -Environment "prod" \
          -Tactics "${{ inputs.tactics }}" \
          -Techniques "${{ inputs.techniques }}" \
          -CreateIncident:true
    
    - name: Validate Bicep files
      run: |
        az bicep install
        az bicep build --file env/deploy-dev.bicep
        az bicep build --file env/deploy-prod.bicep
        echo "‚úÖ Bicep files validated successfully"
    
    - name: Debug - Show changes
      run: |
        echo "=== Debug: Files that will be committed ==="
        git status
        echo "=== Debug: Changes in Bicep files ==="
        git diff --cached env/deploy-dev.bicep || echo "No changes in dev Bicep"
        git diff --cached env/deploy-prod.bicep || echo "No changes in prod Bicep"
        echo "=== Debug: KQL file ==="
        git diff --cached kql/${{ inputs.rule_name }}.kql || echo "No KQL file changes"
    
    - name: Commit changes
      run: |
        git add .
        git commit -m "feat: add new detection rule '${{ inputs.display_name }}'

        - Add KQL query: kql/${{ inputs.rule_name }}.kql
        - Add rule configuration to dev environment
        - Add rule configuration to prod environment
        - Severity: ${{ inputs.severity }} (dev) / $PROD_SEVERITY (prod)
        - Tactics: ${{ inputs.tactics }}
        - Techniques: ${{ inputs.techniques }}"
    
    - name: Push branch and create PR
      run: |
        git push origin "feature/add-rule-${{ inputs.rule_name }}"
        
        # Create pull request using GitHub CLI
        gh pr create \
          --base main \
          --head "feature/add-rule-${{ inputs.rule_name }}" \
          --title "feat: Add new detection rule - ${{ inputs.display_name }}" \
          --body "## üéØ New Detection Rule: ${{ inputs.display_name }}

        This PR adds a new detection rule to both dev and prod environments.

        ### üìã Rule Details
        - **Name**: \`${{ inputs.rule_name }}\`
        - **Display Name**: \`${{ inputs.display_name }}\`
        - **Severity**: \`${{ inputs.severity }}\` (dev) / \`$PROD_SEVERITY\` (prod)
        - **Tactics**: \`${{ inputs.tactics }}\`
        - **Techniques**: \`${{ inputs.techniques }}\`

        ### üìÅ Files Changed
        - \`kql/${{ inputs.rule_name }}.kql\` - New KQL query
        - \`env/deploy-dev.bicep\` - Dev environment configuration
        - \`env/deploy-prod.bicep\` - Prod environment configuration

        ### üîç Validation
        - ‚úÖ KQL query syntax validated
        - ‚úÖ Bicep templates build successfully
        - ‚úÖ Entity mappings and custom details auto-detected

        ### üöÄ Deployment Process
        1. **Review**: Engineer reviews the rule logic and configuration
        2. **Test**: Rule deploys to dev environment for testing
        3. **Validate**: Engineer validates the rule in Sentinel dev environment
        4. **Approve**: Once validated, approve and merge this PR
        5. **Deploy**: Rule automatically deploys to prod environment

        ### üìù Next Steps
        - [ ] Review the KQL query logic
        - [ ] Test the rule in dev environment
        - [ ] Validate alert generation and incident creation
        - [ ] Approve and merge this PR

        ---
        *This PR was automatically generated by the rule creation workflow.*" \
          --label "enhancement,detection-rule" \
          --assignee "${{ github.actor }}"
    
    - name: Trigger deployment to test environment
      run: |
        BRANCH_NAME="feature/add-rule-${{ inputs.rule_name }}"
        echo "üöÄ Automatically triggering deployment to dev environment for testing..."
        
        # Trigger the Deploy Detection Rules workflow on the new branch
        gh workflow run "Deploy Detection Rules" \
          --ref "$BRANCH_NAME" \
          --field environment=dev \
          --field skip_validation=false
        
        echo "‚úÖ Deployment workflow triggered successfully!"
    
    - name: Deployment Instructions
      run: |
        echo "üéâ Pull request created and deployment triggered successfully!"
        echo ""
        echo "üìã What just happened:"
        echo "1. ‚úÖ PR created with new detection rule"
        echo "2. ‚úÖ Deployment to dev environment triggered automatically"
        echo "3. üîÑ Rule is now deploying to test Sentinel instance"
        echo ""
        echo "üìã Next steps:"
        echo "1. Monitor the deployment workflow in the Actions tab"
        echo "2. Review the rule in the PR once deployment completes"
        echo "3. Test the rule in dev Sentinel environment"
        echo "4. Approve and merge this PR to deploy to production"
        echo ""
        echo "üîó View deployment progress: https://github.com/${{ github.repository }}/actions/workflows/deploy.yml"
    

