#!/usr/bin/env pwsh

# Script to generate Bicep files from rules JSON
# This eliminates the need for hardcoded KQL variables and makes the system truly dynamic

param(
    [Parameter(Mandatory)]
    [string]$Organization,
    
    [Parameter(Mandatory)]
    [ValidateSet("dev", "prod")]
    [string]$Environment
)

function Get-OrganizationPaths {
    param([string]$OrganizationName, [string]$Environment)
    
    $orgRoot = "organizations/$OrganizationName"
    
    return @{
        EnvDirectory = "$orgRoot/env"
        KqlDirectory = "$orgRoot/kql/$Environment"
        BicepPath = "$orgRoot/env/deploy-$Environment.bicep"
        RulesJsonPath = "$orgRoot/env/rules-$Environment.json"
    }
}

function Generate-BicepFromJson {
    param([string]$OrganizationName, [string]$Environment)
    
    Write-Host "üîÑ Generating Bicep file for $OrganizationName ($Environment)..." -ForegroundColor Cyan
    
    $paths = Get-OrganizationPaths -OrganizationName $OrganizationName -Environment $Environment
    
    # Read rules JSON
    if (-not (Test-Path $paths.RulesJsonPath)) {
        Write-Host "‚ùå Rules JSON not found: $($paths.RulesJsonPath)" -ForegroundColor Red
        return $false
    }
    
    $rulesConfig = Get-Content -Path $paths.RulesJsonPath -Raw | ConvertFrom-Json
    Write-Host "üìä Found $($rulesConfig.Count) rules in JSON" -ForegroundColor Green
    
    # Generate KQL variable declarations and create a lookup object
    $kqlVariables = @()
    $kqlLookupEntries = @()
    
    foreach ($rule in $rulesConfig) {
        $cleanName = $rule.name -replace '[^a-z0-9]', ''
        $kqlVarName = "kql$cleanName"
        $kqlVariables += "var $kqlVarName = loadTextContent('../kql/$Environment/$($rule.kqlFile)')"
        $kqlLookupEntries += "  '$($rule.kqlFile)': $kqlVarName"
    }
    
    $kqlLookup = "var kqlLookup = {`n$($kqlLookupEntries -join "`n")`n}"
    
    # Generate the complete Bicep file
    $bicepContent = @"
// Auto-generated Bicep file for $Environment environment
// Generated by generate-bicep-from-json.ps1 - DO NOT EDIT MANUALLY
// Edit rules-$Environment.json instead and regenerate

// Load KQL files dynamically based on rules.json
$($kqlVariables -join "`n")

// Create KQL lookup object for dynamic access
$kqlLookup

// $Environment environment wrapper - loads KQL files and configures rules
@description('Log Analytics workspace name (Sentinel-enabled)')
param workspaceName string = 'sentinel-rg-$Environment'

// Load rules configuration from JSON file
var rulesConfig = loadJsonContent('rules-$Environment.json')

// Transform JSON rules to Bicep format with KQL content
var rules = [for rule in rulesConfig: {
  name: rule.name
  displayName: rule.displayName
  kql: kqlLookup[rule.kqlFile]
  severity: rule.severity
  enabled: rule.enabled
  frequency: rule.frequency
  period: rule.period
  tactics: rule.tactics
  techniques: rule.techniques
  createIncident: rule.createIncident
  grouping: rule.grouping
  entities: rule.entities
  customDetails: rule.customDetails
}]

// Deploy rules using the main module
module sentinelRules '../../../infra/sentinel-rules.bicep' = {
  name: 'sentinel-rules-$Environment'
  params: {
    workspaceName: workspaceName
    rules: rules
  }
}

// Outputs
output deployedRules array = sentinelRules.outputs.deployedRules
"@

    # Write the Bicep file
    Write-Host "üíæ Writing Bicep file: $($paths.BicepPath)" -ForegroundColor Cyan
    Set-Content -Path $paths.BicepPath -Value $bicepContent -Encoding UTF8
    
    # Test compilation
    Write-Host "üî® Testing Bicep compilation..." -ForegroundColor Yellow
    Push-Location (Split-Path $paths.BicepPath)
    try {
        $compileResult = & az bicep build --file (Split-Path $paths.BicepPath -Leaf) --stdout 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Bicep compilation successful" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ùå Bicep compilation failed:" -ForegroundColor Red
            Write-Host $compileResult -ForegroundColor Red
            return $false
        }
    } finally {
        Pop-Location
    }
}

# Main execution
try {
    $success = Generate-BicepFromJson -OrganizationName $Organization -Environment $Environment
    if ($success) {
        Write-Host "üéâ Successfully generated Bicep file for $Organization ($Environment)" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Failed to generate Bicep file" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "‚ùå Error: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}
